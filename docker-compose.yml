version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shift_scheduler_db
    environment:
      POSTGRES_DB: shift_scheduler
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - shift_scheduler_network
    restart: unless-stopped

  # Backend API
  backend:
    build: ./backend
    container_name: shift_scheduler_backend
    environment:
      NODE_ENV: production
      PORT: 5000
      FRONTEND_URL: http://localhost:3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: shift_scheduler
      DB_USER: postgres
      DB_PASSWORD: password
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRES_IN: 24h
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    networks:
      - shift_scheduler_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile.frontend
    container_name: shift_scheduler_frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - shift_scheduler_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  shift_scheduler_network:
    driver: bridge

